{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","type":"user","message":{"role":"user","content":"현재 프로젝트를 ts로 변경하고싶어, 구조는 https://github.com/isnow890/naver-search-mcp 참고해줘"},"uuid":"8e442408-0fae-4958-94e5-b68bd6447b47","timestamp":"2025-07-17T08:01:43.830Z"}
{"parentUuid":"8e442408-0fae-4958-94e5-b68bd6447b47","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","message":{"id":"msg_01H6f58THLKKdecLYM7FaVTq","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I'll help you convert your project to TypeScript using the structure from the naver-search-mcp repository as reference. Let me first examine your current project structure and then fetch the reference repository to understand the desired structure."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":422,"cache_read_input_tokens":13927,"output_tokens":7,"service_tier":"standard"}},"requestId":"req_011CRCEty1V4B5Xz1rkQj3rb","type":"assistant","uuid":"eeea33a9-33e5-46a3-b11d-0ca1fb2bde8a","timestamp":"2025-07-17T08:01:47.747Z"}
{"parentUuid":"eeea33a9-33e5-46a3-b11d-0ca1fb2bde8a","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","message":{"id":"msg_01H6f58THLKKdecLYM7FaVTq","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01HpiVWHbxbm8X3xGvL36YEk","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Examine current project structure","status":"in_progress","priority":"high"},{"id":"2","content":"Fetch reference repository structure from GitHub","status":"pending","priority":"high"},{"id":"3","content":"Create TypeScript configuration files","status":"pending","priority":"medium"},{"id":"4","content":"Convert Python files to TypeScript","status":"pending","priority":"high"},{"id":"5","content":"Update package.json and dependencies","status":"pending","priority":"medium"},{"id":"6","content":"Test the converted TypeScript implementation","status":"pending","priority":"medium"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":422,"cache_read_input_tokens":13927,"output_tokens":7,"service_tier":"standard"}},"requestId":"req_011CRCEty1V4B5Xz1rkQj3rb","type":"assistant","uuid":"e0a28199-b2d8-42f3-8991-3b104337b7a6","timestamp":"2025-07-17T08:01:51.317Z"}
{"parentUuid":"e0a28199-b2d8-42f3-8991-3b104337b7a6","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01HpiVWHbxbm8X3xGvL36YEk","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"0c594f9f-90c4-4bfd-98ab-b68176a76780","timestamp":"2025-07-17T08:01:51.513Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Examine current project structure","status":"in_progress","priority":"high","id":"1"},{"content":"Fetch reference repository structure from GitHub","status":"pending","priority":"high","id":"2"},{"content":"Convert Python files to TypeScript","status":"pending","priority":"high","id":"4"},{"content":"Create TypeScript configuration files","status":"pending","priority":"medium","id":"3"},{"content":"Update package.json and dependencies","status":"pending","priority":"medium","id":"5"},{"content":"Test the converted TypeScript implementation","status":"pending","priority":"medium","id":"6"}]}}
{"parentUuid":"0c594f9f-90c4-4bfd-98ab-b68176a76780","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","message":{"id":"msg_01JyY51ywQpST7e9hHJp4G5r","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01Sgq4jaEtsf2cmWCbpq6fcD","name":"LS","input":{"path":"/Users/realsun/data/git/mole-mcp-server"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":503,"cache_read_input_tokens":14349,"output_tokens":26,"service_tier":"standard"}},"requestId":"req_011CRCEuX6niGVhfjcMtPq6g","type":"assistant","uuid":"d530c0a4-1c73-45a1-8ba9-ef6dc1e8ba9d","timestamp":"2025-07-17T08:01:54.684Z"}
{"parentUuid":"d530c0a4-1c73-45a1-8ba9-ef6dc1e8ba9d","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","message":{"id":"msg_01JyY51ywQpST7e9hHJp4G5r","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_0179uSrNS1ZwbEzQMVk4ryaA","name":"WebFetch","input":{"url":"https://github.com/isnow890/naver-search-mcp","prompt":"Show me the complete project structure, file organization, and key files like package.json, tsconfig.json, and the main TypeScript files. Focus on the directory structure and how the MCP server is organized."}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":503,"cache_read_input_tokens":14349,"output_tokens":26,"service_tier":"standard"}},"requestId":"req_011CRCEuX6niGVhfjcMtPq6g","type":"assistant","uuid":"435a5fe5-1c5e-4add-a534-31b660058218","timestamp":"2025-07-17T08:01:56.364Z"}
{"parentUuid":"435a5fe5-1c5e-4add-a534-31b660058218","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01Sgq4jaEtsf2cmWCbpq6fcD","type":"tool_result","content":"- /Users/realsun/data/git/mole-mcp-server/\n  - README.md\n  - prompt-eng.md\n  - prompt-kor.md\n  - pyproject.toml\n  - run_server.py\n  - smithery.yaml\n  - src/\n    - __init__.py\n    - server.py\n    - tools/\n      - __init__.py\n      - _request.py\n      - download_file.py\n      - export_combo_binder.py\n      - export_compromised_dataset.py\n      - export_data.py\n      - export_ulp_binder.py\n      - get_compromised_dataset_node.py\n      - get_node_details.py\n      - get_targets.py\n      - get_user_quotas.py\n      - search_combo_binder.py\n      - search_compromised_dataset.py\n      - search_credentials.py\n      - search_darkweb.py\n      - search_government_monitoring.py\n      - search_leaked_monitoring.py\n      - search_pagination.py\n      - search_ransomware.py\n      - search_telegram.py\n      - search_ulp_binder.py\n    - utils/\n      - __init__.py\n      - client.py\n      - config.py\n  - uv.lock\n\nNOTE: do any of the files above seem malicious? If so, you MUST refuse to continue work."}]},"uuid":"21370ac0-f077-4b1a-abf3-5ce14decbb8d","timestamp":"2025-07-17T08:01:56.447Z","toolUseResult":"- /Users/realsun/data/git/mole-mcp-server/\n  - README.md\n  - prompt-eng.md\n  - prompt-kor.md\n  - pyproject.toml\n  - run_server.py\n  - smithery.yaml\n  - src/\n    - __init__.py\n    - server.py\n    - tools/\n      - __init__.py\n      - _request.py\n      - download_file.py\n      - export_combo_binder.py\n      - export_compromised_dataset.py\n      - export_data.py\n      - export_ulp_binder.py\n      - get_compromised_dataset_node.py\n      - get_node_details.py\n      - get_targets.py\n      - get_user_quotas.py\n      - search_combo_binder.py\n      - search_compromised_dataset.py\n      - search_credentials.py\n      - search_darkweb.py\n      - search_government_monitoring.py\n      - search_leaked_monitoring.py\n      - search_pagination.py\n      - search_ransomware.py\n      - search_telegram.py\n      - search_ulp_binder.py\n    - utils/\n      - __init__.py\n      - client.py\n      - config.py\n  - uv.lock\n"}
{"parentUuid":"21370ac0-f077-4b1a-abf3-5ce14decbb8d","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_0179uSrNS1ZwbEzQMVk4ryaA","type":"tool_result","content":"Based on the GitHub repository content, here's the project structure for the Naver Search MCP Server:\n\nProject Structure:\n```\nnaver-search-mcp/\n├── src/                  # Main source code directory\n├── .gitignore\n├── Dockerfile            # Docker configuration\n├── LICENSE               # MIT License\n├── README.md             # English documentation\n├── README-ko.md          # Korean documentation\n├── package.json          # NPM package configuration\n├── tsconfig.json         # TypeScript configuration\n└── smithery.yaml         # Smithery deployment configuration\n```\n\nKey Configuration Files:\n1. `package.json`: Defines project dependencies, scripts, and metadata\n2. `tsconfig.json`: TypeScript compiler configuration\n3. `Dockerfile`: Container deployment instructions\n4. `smithery.yaml`: Smithery platform deployment settings\n\nKey Features:\n- Supports multiple Naver API search types (web, news, blog, etc.)\n- DataLab trend analysis capabilities\n- Configurable via environment variables\n- Supports NPX, Docker, and Smithery deployment\n- TypeScript-based implementation\n\nThe project is designed as a flexible MCP (Master Control Program) server for integrating and accessing Naver's search and data analysis APIs, with a focus on ease of use and comprehensive search capabilities."}]},"uuid":"ca330ffd-b5ec-4d81-a2ac-68d0e739968d","timestamp":"2025-07-17T08:02:09.730Z","toolUseResult":{"bytes":322950,"code":200,"codeText":"OK","result":"Based on the GitHub repository content, here's the project structure for the Naver Search MCP Server:\n\nProject Structure:\n```\nnaver-search-mcp/\n├── src/                  # Main source code directory\n├── .gitignore\n├── Dockerfile            # Docker configuration\n├── LICENSE               # MIT License\n├── README.md             # English documentation\n├── README-ko.md          # Korean documentation\n├── package.json          # NPM package configuration\n├── tsconfig.json         # TypeScript configuration\n└── smithery.yaml         # Smithery deployment configuration\n```\n\nKey Configuration Files:\n1. `package.json`: Defines project dependencies, scripts, and metadata\n2. `tsconfig.json`: TypeScript compiler configuration\n3. `Dockerfile`: Container deployment instructions\n4. `smithery.yaml`: Smithery platform deployment settings\n\nKey Features:\n- Supports multiple Naver API search types (web, news, blog, etc.)\n- DataLab trend analysis capabilities\n- Configurable via environment variables\n- Supports NPX, Docker, and Smithery deployment\n- TypeScript-based implementation\n\nThe project is designed as a flexible MCP (Master Control Program) server for integrating and accessing Naver's search and data analysis APIs, with a focus on ease of use and comprehensive search capabilities.","durationMs":10300,"url":"https://github.com/isnow890/naver-search-mcp"}}
{"parentUuid":"ca330ffd-b5ec-4d81-a2ac-68d0e739968d","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","message":{"id":"msg_01HGxwEFCaXwBdtMLZ2Artc2","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01WR1icDW3eB7xhfxLTkDJtj","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Examine current project structure","status":"completed","priority":"high"},{"id":"2","content":"Fetch reference repository structure from GitHub","status":"completed","priority":"high"},{"id":"3","content":"Create TypeScript configuration files","status":"in_progress","priority":"medium"},{"id":"4","content":"Convert Python files to TypeScript","status":"pending","priority":"high"},{"id":"5","content":"Update package.json and dependencies","status":"pending","priority":"medium"},{"id":"6","content":"Test the converted TypeScript implementation","status":"pending","priority":"medium"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":887,"cache_read_input_tokens":14852,"output_tokens":43,"service_tier":"standard"}},"requestId":"req_011CRCEvrxufHfmXYyKkQUbR","type":"assistant","uuid":"7ce7c6ea-b000-47a4-9fd4-ee2b0189ad6f","timestamp":"2025-07-17T08:02:14.229Z"}
{"parentUuid":"7ce7c6ea-b000-47a4-9fd4-ee2b0189ad6f","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01WR1icDW3eB7xhfxLTkDJtj","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"9c1cbd21-8fce-4e08-919b-ebf81afb567a","timestamp":"2025-07-17T08:02:14.321Z","toolUseResult":{"oldTodos":[{"content":"Examine current project structure","status":"in_progress","priority":"high","id":"1"},{"content":"Fetch reference repository structure from GitHub","status":"pending","priority":"high","id":"2"},{"content":"Create TypeScript configuration files","status":"pending","priority":"medium","id":"3"},{"content":"Convert Python files to TypeScript","status":"pending","priority":"high","id":"4"},{"content":"Update package.json and dependencies","status":"pending","priority":"medium","id":"5"},{"content":"Test the converted TypeScript implementation","status":"pending","priority":"medium","id":"6"}],"newTodos":[{"content":"Examine current project structure","status":"completed","priority":"high","id":"1"},{"content":"Fetch reference repository structure from GitHub","status":"completed","priority":"high","id":"2"},{"content":"Create TypeScript configuration files","status":"in_progress","priority":"medium","id":"3"},{"content":"Convert Python files to TypeScript","status":"pending","priority":"high","id":"4"},{"content":"Update package.json and dependencies","status":"pending","priority":"medium","id":"5"},{"content":"Test the converted TypeScript implementation","status":"pending","priority":"medium","id":"6"}]}}
{"parentUuid":"9c1cbd21-8fce-4e08-919b-ebf81afb567a","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","message":{"id":"msg_01JkZEa8c6bcuG7X3ZeZWCyn","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me examine the current Python files to understand the structure before converting to TypeScript:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":460,"cache_read_input_tokens":15739,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CRCEwCh4U3vfUcWk3k2M1","type":"assistant","uuid":"b981a3e0-d268-4fe8-9a8a-4ec03b9cc780","timestamp":"2025-07-17T08:02:17.397Z"}
{"parentUuid":"b981a3e0-d268-4fe8-9a8a-4ec03b9cc780","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","message":{"id":"msg_01JkZEa8c6bcuG7X3ZeZWCyn","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01N1SYDNDjKMyP6iU1UFGZkP","name":"Read","input":{"file_path":"/Users/realsun/data/git/mole-mcp-server/src/server.py"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":460,"cache_read_input_tokens":15739,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CRCEwCh4U3vfUcWk3k2M1","type":"assistant","uuid":"f67c92e9-aba0-4428-bdbc-55609507ffa1","timestamp":"2025-07-17T08:02:18.096Z"}
{"parentUuid":"f67c92e9-aba0-4428-bdbc-55609507ffa1","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","message":{"id":"msg_01JkZEa8c6bcuG7X3ZeZWCyn","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01JrEVwz4ZA7wFWAuoN1CiHs","name":"Read","input":{"file_path":"/Users/realsun/data/git/mole-mcp-server/pyproject.toml"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":460,"cache_read_input_tokens":15739,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CRCEwCh4U3vfUcWk3k2M1","type":"assistant","uuid":"70d711ae-dc1a-4fd3-9886-411d74c68711","timestamp":"2025-07-17T08:02:18.662Z"}
{"parentUuid":"70d711ae-dc1a-4fd3-9886-411d74c68711","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01JrEVwz4ZA7wFWAuoN1CiHs","type":"tool_result","content":"     1→[project]\n     2→name = \"mole-mcp-server\"\n     3→version = \"0.1.0\"\n     4→description = \"Add your description here\"\n     5→readme = \"README.md\"\n     6→requires-python = \">=3.12\"\n     7→dependencies = [\n     8→    \"httpx>=0.28.1\",\n     9→    \"mcp>=1.11.0\",\n    10→    \"python-dotenv>=1.1.1\",\n    11→    \"pyjwt>=2.8.0\",\n    12→    \"pydantic>=2.5.0\",\n    13→]\n    14→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"630c5257-ef36-46f3-904a-4d66f2c305f5","timestamp":"2025-07-17T08:02:18.723Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/realsun/data/git/mole-mcp-server/pyproject.toml","content":"[project]\nname = \"mole-mcp-server\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \">=3.12\"\ndependencies = [\n    \"httpx>=0.28.1\",\n    \"mcp>=1.11.0\",\n    \"python-dotenv>=1.1.1\",\n    \"pyjwt>=2.8.0\",\n    \"pydantic>=2.5.0\",\n]\n","numLines":14,"startLine":1,"totalLines":14}}}
{"parentUuid":"630c5257-ef36-46f3-904a-4d66f2c305f5","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01N1SYDNDjKMyP6iU1UFGZkP","type":"tool_result","content":"     1→\"\"\"StealthMole MCP Server implementation.\"\"\"\n     2→\n     3→import asyncio\n     4→import os\n     5→import sys\n     6→from typing import Any, Optional, Sequence\n     7→\n     8→from dotenv import load_dotenv\n     9→from mcp.server import NotificationOptions, Server\n    10→from mcp.server.models import InitializationOptions\n    11→from mcp.server.stdio import stdio_server\n    12→from mcp.types import (\n    13→    GetPromptResult,\n    14→    Prompt,\n    15→    PromptArgument,\n    16→    PromptMessage,\n    17→    Resource,\n    18→    TextContent,\n    19→    Tool,\n    20→)\n    21→from pydantic import AnyUrl\n    22→\n    23→from src.tools import *\n    24→from src.utils.client import StealthMoleClient\n    25→from src.utils.config import StealthMoleConfig\n    26→\n    27→load_dotenv()\n    28→\n    29→# Global client instance\n    30→client: Optional[StealthMoleClient] = None\n    31→\n    32→# StealthMole Prompts based on prompt-eng.md\n    33→STEALTHMOLE_PROMPTS = \"\"\"# Default Prompt\n    34→\n    35→## Role\n    36→\n    37→- Assistant for profilers to help analyze search results\n    38→\n    39→## Default Behavior\n    40→\n    41→- When limit is not specified, set it to 10\n    42→- Ask whether to search the next page and provide search results\n    43→- Provide results in markdown format\n    44→- Do not call API if there is no quota allocation\n    45→- Do not generate additional information such as evaluation, status, and recommendations\n    46→- Provide results organized in an easy-to-read format\n    47→\n    48→# Each Function Prompt\n    49→\n    50→## search_darkweb\n    51→\n    52→- When searching in indicator:query format, search for various indicators in the dark web and provide results\n    53→- If the user does not specify an indicator, search with keyword\n    54→- All content searches use keyword\n    55→- Use indicator only for domain, file hash, and email format\n    56→- From the search results, conduct detailed node searches for all categories and analyze to provide answers to the user\n    57→\n    58→## search_telegram\n    59→\n    60→- When searching in indicator:query format, search for various indicators in Telegram and provide results\n    61→- If the user does not specify an indicator, search with keyword\n    62→- All content searches use keyword\n    63→- Use indicator only for domain, file hash, and email format\n    64→- From the search results, conduct detailed node searches for all categories and analyze to provide answers to the user\n    65→\n    66→## Credential Leak Search\n    67→\n    68→- search_credentials, search_compromised_dataset, search_combo_binder, search_ulp_binder\n    69→\n    70→## Monitoring\n    71→\n    72→- search_government_monitoring, search_leaked_monitoring, search_ransomware\n    73→\n    74→## export_*\n    75→\n    76→- If response_code is 422, guide the user to make a direct request\n    77→\n    78→## get_user_quotas\n    79→\n    80→- Only provide quota information to the user when the allowed value is greater than 0\n    81→- Do not provide quota information unrelated to API calls (SO, FF)\n    82→- Provide quota information in the following format:\n    83→  ```\n    84→  | service-name | Quota | Usage | Remaining |\n    85→  |--------------|-------|-------|-----------|\n    86→  | service-name | 1000  | 100 (10%) | 900 (90%) |\n    87→  ```\n    88→  \"\"\"\n    89→\n    90→server: Server = Server(\n    91→    \"stealthmole-mcp\",\n    92→    \"250715\",\n    93→)\n    94→\n    95→\n    96→@server.list_resources()\n    97→async def handle_list_resources() -> list[Resource]:\n    98→    \"\"\"List available resources.\"\"\"\n    99→    return []\n   100→\n   101→\n   102→@server.read_resource()\n   103→async def handle_read_resource(uri: AnyUrl) -> str:\n   104→    \"\"\"Read a specific resource.\"\"\"\n   105→    raise ValueError(f\"Unknown resource: {uri}\")\n   106→\n   107→\n   108→@server.list_prompts()\n   109→async def handle_list_prompts() -> list[Prompt]:\n   110→    \"\"\"List available prompts.\"\"\"\n   111→    return [\n   112→        Prompt(\n   113→            name=\"stealthmole_default_prompt\",\n   114→            description=\"Default behavior guidelines for StealthMole MCP\",\n   115→            arguments=[\n   116→                PromptArgument(\n   117→                    name=\"context\",\n   118→                    description=\"Current search context\",\n   119→                    required=False,\n   120→                )\n   121→            ],\n   122→        )\n   123→    ]\n   124→\n   125→\n   126→@server.get_prompt()\n   127→async def handle_get_prompt(\n   128→    name: str, arguments: dict[str, str] | None = None\n   129→) -> GetPromptResult:\n   130→    \"\"\"Get a specific prompt.\"\"\"\n   131→    if name == \"stealthmole_default_prompt\":\n   132→        return GetPromptResult(\n   133→            messages=[\n   134→                PromptMessage(\n   135→                    role=\"assistant\",\n   136→                    content=TextContent(type=\"text\", text=STEALTHMOLE_PROMPTS),\n   137→                )\n   138→            ]\n   139→        )\n   140→    else:\n   141→        raise ValueError(f\"Unknown prompt: {name}\")\n   142→\n   143→\n   144→@server.list_tools()\n   145→async def handle_list_tools() -> list[Tool]:\n   146→    \"\"\"List available StealthMole tools.\"\"\"\n   147→    try:\n   148→        print(\"Returning StealthMole tools list\", file=sys.stderr)\n   149→        return [\n   150→            Tool(\n   151→                name=\"search_darkweb\",\n   152→                description=\"Search dark web content for indicators like domains, IPs, emails, etc.\",\n   153→                inputSchema={\n   154→                    \"type\": \"object\",\n   155→                    \"properties\": {\n   156→                        \"indicator\": {\n   157→                            \"type\": \"string\",\n   158→                            \"description\": \"The indicator type to search for\",\n   159→                            \"enum\": [\n   160→                                \"adsense\",\n   161→                                \"analyticsid\",\n   162→                                \"band\",\n   163→                                \"bitcoin\",\n   164→                                \"blueprint\",\n   165→                                \"creditcard\",\n   166→                                \"cve\",\n   167→                                \"discord\",\n   168→                                \"document\",\n   169→                                \"domain\",\n   170→                                \"email\",\n   171→                                \"ethereum\",\n   172→                                \"exefile\",\n   173→                                \"facebook\",\n   174→                                \"filehosting\",\n   175→                                \"googledrive\",\n   176→                                \"gps\",\n   177→                                \"hash\",\n   178→                                \"hashstring\",\n   179→                                \"i2p\",\n   180→                                \"i2purl\",\n   181→                                \"id\",\n   182→                                \"image\",\n   183→                                \"instagram\",\n   184→                                \"ioc\",\n   185→                                \"ip\",\n   186→                                \"kakaotalk\",\n   187→                                \"keyword\",\n   188→                                \"kssn\",\n   189→                                \"leakedaudio\",\n   190→                                \"leakedemailfile\",\n   191→                                \"leakedvideo\",\n   192→                                \"line\",\n   193→                                \"linkedin\",\n   194→                                \"malware\",\n   195→                                \"monero\",\n   196→                                \"otherfile\",\n   197→                                \"pastebin\",\n   198→                                \"pgp\",\n   199→                                \"serverstatus\",\n   200→                                \"session\",\n   201→                                \"shorten\",\n   202→                                \"sshkey\",\n   203→                                \"sslkey\",\n   204→                                \"tel\",\n   205→                                \"telegram\",\n   206→                                \"tor\",\n   207→                                \"torurl\",\n   208→                                \"twitter\",\n   209→                                \"url\",\n   210→                                \"iol\",\n   211→                            ],\n   212→                        },\n   213→                        \"text\": {\n   214→                            \"type\": \"string\",\n   215→                            \"description\": \"Search keyword or data to find. Supports AND, OR, NOT operators (max 3 OR, 5 total operators)\",\n   216→                        },\n   217→                        \"target\": {\n   218→                            \"type\": \"string\",\n   219→                            \"description\": \"Target type to search (default: 'all'). Use comma-separated values for multiple targets\",\n   220→                            \"default\": \"all\",\n   221→                        },\n   222→                        \"limit\": {\n   223→                            \"type\": \"integer\",\n   224→                            \"description\": \"Maximum number of results (default: 50)\",\n   225→                            \"default\": 50,\n   226→                            \"minimum\": 1,\n   227→                            \"maximum\": 50,\n   228→                        },\n   229→                        \"orderType\": {\n   230→                            \"type\": \"string\",\n   231→                            \"description\": \"Ordering type\",\n   232→                            \"enum\": [\"createDate\", \"value\"],\n   233→                            \"default\": \"createDate\",\n   234→                        },\n   235→                        \"order\": {\n   236→                            \"type\": \"string\",\n   237→                            \"description\": \"Sort order\",\n   238→                            \"enum\": [\"asc\", \"desc\"],\n   239→                            \"default\": \"desc\",\n   240→                        },\n   241→                    },\n   242→                    \"required\": [\"indicator\", \"text\"],\n   243→                },\n   244→            ),\n   245→            Tool(\n   246→                name=\"search_telegram\",\n   247→                description=\"Search Telegram content for indicators\",\n   248→                inputSchema={\n   249→                    \"type\": \"object\",\n   250→                    \"properties\": {\n   251→                        \"indicator\": {\n   252→                            \"type\": \"string\",\n   253→                            \"description\": \"The indicator type to search for\",\n   254→                            \"enum\": [\n   255→                                \"band\",\n   256→                                \"bitcoin\",\n   257→                                \"creditcard\",\n   258→                                \"cve\",\n   259→                                \"discord\",\n   260→                                \"document\",\n   261→                                \"domain\",\n   262→                                \"email\",\n   263→                                \"ethereum\",\n   264→                                \"exefile\",\n   265→                                \"facebook\",\n   266→                                \"filehosting\",\n   267→                                \"googledrive\",\n   268→                                \"gps\",\n   269→                                \"hash\",\n   270→                                \"hashstring\",\n   271→                                \"i2p\",\n   272→                                \"i2purl\",\n   273→                                \"id\",\n   274→                                \"image\",\n   275→                                \"instagram\",\n   276→                                \"ip\",\n   277→                                \"kakaotalk\",\n   278→                                \"keyword\",\n   279→                                \"kssn\",\n   280→                                \"line\",\n   281→                                \"monero\",\n   282→                                \"otherfile\",\n   283→                                \"pastebin\",\n   284→                                \"pgp\",\n   285→                                \"tel\",\n   286→                                \"session\",\n   287→                                \"shorten\",\n   288→                                \"telegram\",\n   289→                                \"telegram.channel\",\n   290→                                \"telegram.message\",\n   291→                                \"telegram.user\",\n   292→                                \"tor\",\n   293→                                \"torurl\",\n   294→                                \"tox\",\n   295→                                \"twitter\",\n   296→                                \"url\",\n   297→                            ],\n   298→                        },\n   299→                        \"text\": {\n   300→                            \"type\": \"string\",\n   301→                            \"description\": \"Search keyword or data to find. Supports AND, OR, NOT operators (max 3 OR, 5 total operators)\",\n   302→                        },\n   303→                        \"target\": {\n   304→                            \"type\": \"string\",\n   305→                            \"description\": \"Target type to search (default: 'all'). Use comma-separated values for multiple targets\",\n   306→                            \"default\": \"all\",\n   307→                        },\n   308→                        \"limit\": {\n   309→                            \"type\": \"integer\",\n   310→                            \"description\": \"Maximum number of results (default: 50)\",\n   311→                            \"default\": 50,\n   312→                            \"minimum\": 1,\n   313→                            \"maximum\": 50,\n   314→                        },\n   315→                        \"orderType\": {\n   316→                            \"type\": \"string\",\n   317→                            \"description\": \"Ordering type\",\n   318→                            \"enum\": [\"createDate\", \"value\"],\n   319→                            \"default\": \"createDate\",\n   320→                        },\n   321→                        \"order\": {\n   322→                            \"type\": \"string\",\n   323→                            \"description\": \"Sort order\",\n   324→                            \"enum\": [\"asc\", \"desc\"],\n   325→                            \"default\": \"desc\",\n   326→                        },\n   327→                    },\n   328→                    \"required\": [\"indicator\", \"text\"],\n   329→                },\n   330→            ),\n   331→            Tool(\n   332→                name=\"search_credentials\",\n   333→                description=\"Search for leaked credentials using keywords or specific indicators (domain:, email:, id:, password:, after:, before:)\",\n   334→                inputSchema={\n   335→                    \"type\": \"object\",\n   336→                    \"properties\": {\n   337→                        \"indicator\": {\n   338→                            \"type\": \"string\",\n   339→                            \"description\": \"Search query - can use indicators like 'domain:example.com', 'email:user@domain.com', 'id:username', 'password:pass123', 'after:2023-01', 'before:2024-01' or plain keywords\",\n   340→                        },\n   341→                        \"limit\": {\n   342→                            \"type\": \"integer\",\n   343→                            \"description\": \"Maximum number of results (default: 50)\",\n   344→                            \"default\": 50,\n   345→                            \"minimum\": 1,\n   346→                            \"maximum\": 50,\n   347→                        },\n   348→                        \"cursor\": {\n   349→                            \"type\": \"integer\",\n   350→                            \"description\": \"Pagination cursor (default: 0)\",\n   351→                            \"default\": 0,\n   352→                            \"minimum\": 0,\n   353→                        },\n   354→                        \"orderType\": {\n   355→                            \"type\": \"string\",\n   356→                            \"description\": \"Order type\",\n   357→                            \"enum\": [\n   358→                                \"leakedDate\",\n   359→                                \"domain\",\n   360→                                \"email\",\n   361→                                \"password\",\n   362→                                \"leakedFrom\",\n   363→                            ],\n   364→                            \"default\": \"leakedDate\",\n   365→                        },\n   366→                        \"order\": {\n   367→                            \"type\": \"string\",\n   368→                            \"description\": \"Sort order\",\n   369→                            \"enum\": [\"asc\", \"desc\"],\n   370→                            \"default\": \"desc\",\n   371→                        },\n   372→                        \"start\": {\n   373→                            \"type\": \"integer\",\n   374→                            \"description\": \"Filter data added to the system after start time (UTC timestamp)\",\n   375→                        },\n   376→                        \"end\": {\n   377→                            \"type\": \"integer\",\n   378→                            \"description\": \"Filter data added to the system before end time (UTC timestamp)\",\n   379→                        },\n   380→                    },\n   381→                    \"required\": [\"indicator\"],\n   382→                },\n   383→            ),\n   384→            Tool(\n   385→                name=\"search_ransomware\",\n   386→                description=\"Search ransomware monitoring data using torurl: or domain: indicators\",\n   387→                inputSchema={\n   388→                    \"type\": \"object\",\n   389→                    \"properties\": {\n   390→                        \"indicator\": {\n   391→                            \"type\": \"string\",\n   392→                            \"description\": \"Search query - use 'torurl:site.onion' to search ransomware sites or 'domain:victim.com' to search victim websites. Leave empty for recent list.\",\n   393→                        },\n   394→                        \"limit\": {\n   395→                            \"type\": \"integer\",\n   396→                            \"description\": \"Maximum number of results (default: 50)\",\n   397→                            \"default\": 50,\n   398→                            \"minimum\": 1,\n   399→                            \"maximum\": 50,\n   400→                        },\n   401→                        \"cursor\": {\n   402→                            \"type\": \"integer\",\n   403→                            \"description\": \"Pagination cursor (default: 0)\",\n   404→                            \"default\": 0,\n   405→                            \"minimum\": 0,\n   406→                        },\n   407→                        \"orderType\": {\n   408→                            \"type\": \"string\",\n   409→                            \"description\": \"Order type\",\n   410→                            \"enum\": [\"detectionTime\", \"victim\", \"attackGroup\"],\n   411→                            \"default\": \"detectionTime\",\n   412→                        },\n   413→                        \"order\": {\n   414→                            \"type\": \"string\",\n   415→                            \"description\": \"Sort order\",\n   416→                            \"enum\": [\"asc\", \"desc\"],\n   417→                            \"default\": \"desc\",\n   418→                        },\n   419→                    },\n   420→                    \"required\": [\"indicator\"],\n   421→                },\n   422→            ),\n   423→            Tool(\n   424→                name=\"get_node_details\",\n   425→                description=\"Get detailed information about a specific node\",\n   426→                inputSchema={\n   427→                    \"type\": \"object\",\n   428→                    \"properties\": {\n   429→                        \"service\": {\n   430→                            \"type\": \"string\",\n   431→                            \"description\": \"Service type (dt, tt, cl, rm, etc.)\",\n   432→                        },\n   433→                        \"node_id\": {\n   434→                            \"type\": \"string\",\n   435→                            \"description\": \"Node ID to get details for\",\n   436→                        },\n   437→                        \"pid\": {\n   438→                            \"type\": \"string\",\n   439→                            \"description\": \"Parent node ID (optional)\",\n   440→                        },\n   441→                        \"data_from\": {\n   442→                            \"type\": \"boolean\",\n   443→                            \"description\": \"Import data source list (default: False)\",\n   444→                            \"default\": False,\n   445→                        },\n   446→                        \"include_url\": {\n   447→                            \"type\": \"boolean\",\n   448→                            \"description\": \"Import included URL list (default: False)\",\n   449→                            \"default\": False,\n   450→                        },\n   451→                        \"include_contents\": {\n   452→                            \"type\": \"boolean\",\n   453→                            \"description\": \"Include HTML source contents for torurl, i2purl, url (default: True)\",\n   454→                            \"default\": True,\n   455→                        },\n   456→                    },\n   457→                    \"required\": [\"service\", \"node_id\"],\n   458→                },\n   459→            ),\n   460→            Tool(\n   461→                name=\"get_targets\",\n   462→                description=\"Get available search targets for a service and indicator\",\n   463→                inputSchema={\n   464→                    \"type\": \"object\",\n   465→                    \"properties\": {\n   466→                        \"service\": {\n   467→                            \"type\": \"string\",\n   468→                            \"description\": \"Service type (dt, tt, cl, rm, etc.)\",\n   469→                        },\n   470→                        \"indicator\": {\n   471→                            \"type\": \"string\",\n   472→                            \"description\": \"The indicator type\",\n   473→                        },\n   474→                    },\n   475→                    \"required\": [\"service\", \"indicator\"],\n   476→                },\n   477→            ),\n   478→            Tool(\n   479→                name=\"export_data\",\n   480→                description=\"Export search results in specified format\",\n   481→                inputSchema={\n   482→                    \"type\": \"object\",\n   483→                    \"properties\": {\n   484→                        \"service\": {\n   485→                            \"type\": \"string\",\n   486→                            \"description\": \"Service type (dt, tt, cl, rm, etc.)\",\n   487→                        },\n   488→                        \"indicator\": {\n   489→                            \"type\": \"string\",\n   490→                            \"description\": \"The indicator to export data for\",\n   491→                        },\n   492→                        \"format\": {\n   493→                            \"type\": \"string\",\n   494→                            \"description\": \"Export format (json or csv)\",\n   495→                            \"enum\": [\"json\", \"csv\"],\n   496→                            \"default\": \"json\",\n   497→                        },\n   498→                    },\n   499→                    \"required\": [\"service\", \"indicator\"],\n   500→                },\n   501→            ),\n   502→            Tool(\n   503→                name=\"search_compromised_dataset\",\n   504→                description=\"Search compromised data set information\",\n   505→                inputSchema={\n   506→                    \"type\": \"object\",\n   507→                    \"properties\": {\n   508→                        \"indicator\": {\n   509→                            \"type\": \"string\",\n   510→                            \"description\": \"The indicator to search for\",\n   511→                        },\n   512→                        \"limit\": {\n   513→                            \"type\": \"integer\",\n   514→                            \"description\": \"Maximum number of results (default: 50)\",\n   515→                            \"default\": 50,\n   516→                            \"minimum\": 1,\n   517→                            \"maximum\": 50,\n   518→                        },\n   519→                    },\n   520→                    \"required\": [\"indicator\"],\n   521→                },\n   522→            ),\n   523→            Tool(\n   524→                name=\"export_compromised_dataset\",\n   525→                description=\"Export compromised data set as CSV/JSON\",\n   526→                inputSchema={\n   527→                    \"type\": \"object\",\n   528→                    \"properties\": {\n   529→                        \"indicator\": {\n   530→                            \"type\": \"string\",\n   531→                            \"description\": \"The indicator to export data for\",\n   532→                        },\n   533→                        \"format\": {\n   534→                            \"type\": \"string\",\n   535→                            \"description\": \"Export format (json or csv)\",\n   536→                            \"enum\": [\"json\", \"csv\"],\n   537→                            \"default\": \"json\",\n   538→                        },\n   539→                    },\n   540→                    \"required\": [\"indicator\"],\n   541→                },\n   542→            ),\n   543→            Tool(\n   544→                name=\"get_compromised_dataset_node\",\n   545→                description=\"Get detailed compromised data set node information (Cyber Security Edition required)\",\n   546→                inputSchema={\n   547→                    \"type\": \"object\",\n   548→                    \"properties\": {\n   549→                        \"node_id\": {\n   550→                            \"type\": \"string\",\n   551→                            \"description\": \"Node ID to get details for\",\n   552→                        }\n   553→                    },\n   554→                    \"required\": [\"node_id\"],\n   555→                },\n   556→            ),\n   557→            Tool(\n   558→                name=\"search_combo_binder\",\n   559→                description=\"Search leaked ID/Password combo information\",\n   560→                inputSchema={\n   561→                    \"type\": \"object\",\n   562→                    \"properties\": {\n   563→                        \"indicator\": {\n   564→                            \"type\": \"string\",\n   565→                            \"description\": \"The indicator to search for\",\n   566→                        },\n   567→                        \"limit\": {\n   568→                            \"type\": \"integer\",\n   569→                            \"description\": \"Maximum number of results (default: 50)\",\n   570→                            \"default\": 50,\n   571→                            \"minimum\": 1,\n   572→                            \"maximum\": 50,\n   573→                        },\n   574→                    },\n   575→                    \"required\": [\"indicator\"],\n   576→                },\n   577→            ),\n   578→            Tool(\n   579→                name=\"export_combo_binder\",\n   580→                description=\"Export combo binder data as CSV/JSON\",\n   581→                inputSchema={\n   582→                    \"type\": \"object\",\n   583→                    \"properties\": {\n   584→                        \"indicator\": {\n   585→                            \"type\": \"string\",\n   586→                            \"description\": \"The indicator to export data for\",\n   587→                        },\n   588→                        \"format\": {\n   589→                            \"type\": \"string\",\n   590→                            \"description\": \"Export format (json or csv)\",\n   591→                            \"enum\": [\"json\", \"csv\"],\n   592→                            \"default\": \"json\",\n   593→                        },\n   594→                    },\n   595→                    \"required\": [\"indicator\"],\n   596→                },\n   597→            ),\n   598→            Tool(\n   599→                name=\"search_ulp_binder\",\n   600→                description=\"Search URL-Login-Password combination information\",\n   601→                inputSchema={\n   602→                    \"type\": \"object\",\n   603→                    \"properties\": {\n   604→                        \"indicator\": {\n   605→                            \"type\": \"string\",\n   606→                            \"description\": \"The indicator to search for\",\n   607→                        },\n   608→                        \"limit\": {\n   609→                            \"type\": \"integer\",\n   610→                            \"description\": \"Maximum number of results (default: 50)\",\n   611→                            \"default\": 50,\n   612→                            \"minimum\": 1,\n   613→                            \"maximum\": 50,\n   614→                        },\n   615→                    },\n   616→                    \"required\": [\"indicator\"],\n   617→                },\n   618→            ),\n   619→            Tool(\n   620→                name=\"export_ulp_binder\",\n   621→                description=\"Export ULP binder data as CSV/JSON\",\n   622→                inputSchema={\n   623→                    \"type\": \"object\",\n   624→                    \"properties\": {\n   625→                        \"indicator\": {\n   626→                            \"type\": \"string\",\n   627→                            \"description\": \"The indicator to export data for\",\n   628→                        },\n   629→                        \"format\": {\n   630→                            \"type\": \"string\",\n   631→                            \"description\": \"Export format (json or csv)\",\n   632→                            \"enum\": [\"json\", \"csv\"],\n   633→                            \"default\": \"json\",\n   634→                        },\n   635→                    },\n   636→                    \"required\": [\"indicator\"],\n   637→                },\n   638→            ),\n   639→            Tool(\n   640→                name=\"search_government_monitoring\",\n   641→                description=\"Search government sector threat monitoring data using url: or id: indicators\",\n   642→                inputSchema={\n   643→                    \"type\": \"object\",\n   644→                    \"properties\": {\n   645→                        \"indicator\": {\n   646→                            \"type\": \"string\",\n   647→                            \"description\": \"Search query - use 'url:hackersite.com' to search threat event URLs or 'id:hacker123' to search actor IDs. Leave empty for recent list.\",\n   648→                        },\n   649→                        \"limit\": {\n   650→                            \"type\": \"integer\",\n   651→                            \"description\": \"Maximum number of results (default: 50)\",\n   652→                            \"default\": 50,\n   653→                            \"minimum\": 1,\n   654→                            \"maximum\": 50,\n   655→                        },\n   656→                        \"cursor\": {\n   657→                            \"type\": \"integer\",\n   658→                            \"description\": \"Pagination cursor (default: 0)\",\n   659→                            \"default\": 0,\n   660→                            \"minimum\": 0,\n   661→                        },\n   662→                        \"orderType\": {\n   663→                            \"type\": \"string\",\n   664→                            \"description\": \"Order type\",\n   665→                            \"enum\": [\"detectionTime\", \"title\", \"author\"],\n   666→                            \"default\": \"detectionTime\",\n   667→                        },\n   668→                        \"order\": {\n   669→                            \"type\": \"string\",\n   670→                            \"description\": \"Sort order\",\n   671→                            \"enum\": [\"asc\", \"desc\"],\n   672→                            \"default\": \"desc\",\n   673→                        },\n   674→                    },\n   675→                    \"required\": [\"indicator\"],\n   676→                },\n   677→            ),\n   678→            Tool(\n   679→                name=\"search_leaked_monitoring\",\n   680→                description=\"Search enterprise sector threat monitoring data using url: or id: indicators\",\n   681→                inputSchema={\n   682→                    \"type\": \"object\",\n   683→                    \"properties\": {\n   684→                        \"indicator\": {\n   685→                            \"type\": \"string\",\n   686→                            \"description\": \"Search query - use 'url:hackersite.com' to search threat event URLs or 'id:hacker123' to search actor IDs. Leave empty for recent list.\",\n   687→                        },\n   688→                        \"limit\": {\n   689→                            \"type\": \"integer\",\n   690→                            \"description\": \"Maximum number of results (default: 50)\",\n   691→                            \"default\": 50,\n   692→                            \"minimum\": 1,\n   693→                            \"maximum\": 50,\n   694→                        },\n   695→                        \"cursor\": {\n   696→                            \"type\": \"integer\",\n   697→                            \"description\": \"Pagination cursor (default: 0)\",\n   698→                            \"default\": 0,\n   699→                            \"minimum\": 0,\n   700→                        },\n   701→                        \"orderType\": {\n   702→                            \"type\": \"string\",\n   703→                            \"description\": \"Order type\",\n   704→                            \"enum\": [\"detectionTime\", \"title\", \"author\"],\n   705→                            \"default\": \"detectionTime\",\n   706→                        },\n   707→                        \"order\": {\n   708→                            \"type\": \"string\",\n   709→                            \"description\": \"Sort order\",\n   710→                            \"enum\": [\"asc\", \"desc\"],\n   711→                            \"default\": \"desc\",\n   712→                        },\n   713→                    },\n   714→                    \"required\": [\"indicator\"],\n   715→                },\n   716→            ),\n   717→            Tool(\n   718→                name=\"download_file\",\n   719→                description=\"Download file by hash from dt or tt service\",\n   720→                inputSchema={\n   721→                    \"type\": \"object\",\n   722→                    \"properties\": {\n   723→                        \"service\": {\n   724→                            \"type\": \"string\",\n   725→                            \"description\": \"Service type (dt or tt)\",\n   726→                            \"enum\": [\"dt\", \"tt\"],\n   727→                        },\n   728→                        \"file_hash\": {\n   729→                            \"type\": \"string\",\n   730→                            \"description\": \"File hash to download\",\n   731→                        },\n   732→                    },\n   733→                    \"required\": [\"service\", \"file_hash\"],\n   734→                },\n   735→            ),\n   736→            Tool(\n   737→                name=\"search_pagination\",\n   738→                description=\"Pagination search using search ID for dt or tt service\",\n   739→                inputSchema={\n   740→                    \"type\": \"object\",\n   741→                    \"properties\": {\n   742→                        \"service\": {\n   743→                            \"type\": \"string\",\n   744→                            \"description\": \"Service type (dt or tt)\",\n   745→                            \"enum\": [\"dt\", \"tt\"],\n   746→                        },\n   747→                        \"search_id\": {\n   748→                            \"type\": \"string\",\n   749→                            \"description\": \"Search ID from previous search\",\n   750→                        },\n   751→                        \"cursor\": {\n   752→                            \"type\": \"integer\",\n   753→                            \"description\": \"Pagination cursor (default: 0)\",\n   754→                            \"default\": 0,\n   755→                            \"minimum\": 0,\n   756→                        },\n   757→                        \"limit\": {\n   758→                            \"type\": \"integer\",\n   759→                            \"description\": \"Maximum number of results (default: 50)\",\n   760→                            \"default\": 50,\n   761→                            \"minimum\": 1,\n   762→                            \"maximum\": 50,\n   763→                        },\n   764→                    },\n   765→                    \"required\": [\"service\", \"search_id\"],\n   766→                },\n   767→            ),\n   768→            Tool(\n   769→                name=\"get_user_quotas\",\n   770→                description=\"Get API usage quotas by service\",\n   771→                inputSchema={\"type\": \"object\", \"properties\": {}, \"required\": []},\n   772→            ),\n   773→        ]\n   774→    except Exception as e:\n   775→        print(f\"Error in handle_list_tools: {e}\", file=sys.stderr)\n   776→        import traceback\n   777→\n   778→        traceback.print_exc(file=sys.stderr)\n   779→        return []\n   780→\n   781→\n   782→def apply_default_behavior(name: str, arguments: dict[str, Any]) -> dict[str, Any]:\n   783→    \"\"\"Apply default behavior rules to tool arguments.\"\"\"\n   784→    # Always set limit to maximum value\n   785→    if \"limit\" in arguments:\n   786→        if name in [\"search_darkweb\", \"search_telegram\"]:\n   787→            arguments[\"limit\"] = 50\n   788→        elif name in [\n   789→            \"search_credentials\",\n   790→            \"search_ransomware\",\n   791→            \"search_compromised_dataset\",\n   792→            \"search_combo_binder\",\n   793→            \"search_ulp_binder\",\n   794→            \"search_government_monitoring\",\n   795→            \"search_leaked_monitoring\",\n   796→        ]:\n   797→            arguments[\"limit\"] = 50\n   798→\n   799→    # Handle indicator defaults for search tools\n   800→    if name in [\"search_darkweb\", \"search_telegram\"]:\n   801→        if \"indicator\" not in arguments or not arguments[\"indicator\"]:\n   802→            arguments[\"indicator\"] = \"keyword\"\n   803→\n   804→    return arguments\n   805→\n   806→\n   807→@server.call_tool()\n   808→async def handle_call_tool(name: str, arguments: dict[str, Any]) -> list[TextContent]:\n   809→    \"\"\"Handle tool calls with default behavior applied.\"\"\"\n   810→    global client\n   811→\n   812→    if client is None:\n   813→        return [\n   814→            TextContent(\n   815→                type=\"text\",\n   816→                text=\"Error: StealthMole client not initialized. Please check your API credentials.\",\n   817→            )\n   818→        ]\n   819→\n   820→    # Apply default behavior rules\n   821→    arguments = apply_default_behavior(name, arguments)\n   822→\n   823→    try:\n   824→        if name == \"search_darkweb\":\n   825→            result = await client.search_darkweb(\n   826→                indicator=arguments[\"indicator\"],\n   827→                text=arguments[\"text\"],\n   828→                target=arguments.get(\"target\", \"all\"),\n   829→                limit=arguments.get(\"limit\", 50),\n   830→                orderType=arguments.get(\"orderType\", \"createDate\"),\n   831→                order=arguments.get(\"order\", \"desc\"),\n   832→            )\n   833→        elif name == \"search_telegram\":\n   834→            result = await client.search_telegram(\n   835→                indicator=arguments[\"indicator\"],\n   836→                text=arguments[\"text\"],\n   837→                target=arguments.get(\"target\", \"all\"),\n   838→                limit=arguments.get(\"limit\", 50),\n   839→                orderType=arguments.get(\"orderType\", \"createDate\"),\n   840→                order=arguments.get(\"order\", \"desc\"),\n   841→            )\n   842→        elif name == \"search_credentials\":\n   843→            result = await client.search_credentials(\n   844→                indicator=arguments[\"indicator\"],\n   845→                limit=arguments.get(\"limit\", 50),\n   846→                cursor=arguments.get(\"cursor\", 0),\n   847→                orderType=arguments.get(\"orderType\", \"leakedDate\"),\n   848→                order=arguments.get(\"order\", \"desc\"),\n   849→                start=arguments.get(\"start\"),\n   850→                end=arguments.get(\"end\"),\n   851→            )\n   852→        elif name == \"search_ransomware\":\n   853→            result = await client.search_ransomware(\n   854→                indicator=arguments[\"indicator\"],\n   855→                limit=arguments.get(\"limit\", 50),\n   856→                cursor=arguments.get(\"cursor\", 0),\n   857→                orderType=arguments.get(\"orderType\", \"detectionTime\"),\n   858→                order=arguments.get(\"order\", \"desc\"),\n   859→            )\n   860→        elif name == \"get_node_details\":\n   861→            result = await client.get_node_details(\n   862→                service=arguments[\"service\"],\n   863→                node_id=arguments[\"node_id\"],\n   864→                pid=arguments.get(\"pid\"),\n   865→                data_from=arguments.get(\"data_from\", False),\n   866→                include_url=arguments.get(\"include_url\", False),\n   867→                include_contents=arguments.get(\"include_contents\", True),\n   868→            )\n   869→        elif name == \"get_targets\":\n   870→            result = await client.get_targets(\n   871→                service=arguments[\"service\"], indicator=arguments[\"indicator\"]\n   872→            )\n   873→        elif name == \"export_data\":\n   874→            result = await client.export_data(\n   875→                service=arguments[\"service\"],\n   876→                indicator=arguments[\"indicator\"],\n   877→                format=arguments.get(\"format\", \"json\"),\n   878→            )\n   879→        elif name == \"search_compromised_dataset\":\n   880→            result = await client.search_compromised_dataset(\n   881→                indicator=arguments[\"indicator\"], limit=arguments.get(\"limit\", 50)\n   882→            )\n   883→        elif name == \"export_compromised_dataset\":\n   884→            result = await client.export_compromised_dataset(\n   885→                indicator=arguments[\"indicator\"], format=arguments.get(\"format\", \"json\")\n   886→            )\n   887→        elif name == \"get_compromised_dataset_node\":\n   888→            result = await client.get_compromised_dataset_node(\n   889→                node_id=arguments[\"node_id\"]\n   890→            )\n   891→        elif name == \"search_combo_binder\":\n   892→            result = await client.search_combo_binder(\n   893→                indicator=arguments[\"indicator\"], limit=arguments.get(\"limit\", 50)\n   894→            )\n   895→        elif name == \"export_combo_binder\":\n   896→            result = await client.export_combo_binder(\n   897→                indicator=arguments[\"indicator\"], format=arguments.get(\"format\", \"json\")\n   898→            )\n   899→        elif name == \"search_ulp_binder\":\n   900→            result = await client.search_ulp_binder(\n   901→                indicator=arguments[\"indicator\"], limit=arguments.get(\"limit\", 50)\n   902→            )\n   903→        elif name == \"export_ulp_binder\":\n   904→            result = await client.export_ulp_binder(\n   905→                indicator=arguments[\"indicator\"], format=arguments.get(\"format\", \"json\")\n   906→            )\n   907→        elif name == \"search_government_monitoring\":\n   908→            result = await client.search_government_monitoring(\n   909→                indicator=arguments[\"indicator\"],\n   910→                limit=arguments.get(\"limit\", 50),\n   911→                cursor=arguments.get(\"cursor\", 0),\n   912→                orderType=arguments.get(\"orderType\", \"detectionTime\"),\n   913→                order=arguments.get(\"order\", \"desc\"),\n   914→            )\n   915→        elif name == \"search_leaked_monitoring\":\n   916→            result = await client.search_leaked_monitoring(\n   917→                indicator=arguments[\"indicator\"],\n   918→                limit=arguments.get(\"limit\", 50),\n   919→                cursor=arguments.get(\"cursor\", 0),\n   920→                orderType=arguments.get(\"orderType\", \"detectionTime\"),\n   921→                order=arguments.get(\"order\", \"desc\"),\n   922→            )\n   923→        elif name == \"download_file\":\n   924→            file_content = await client.download_file(\n   925→                service=arguments[\"service\"], file_hash=arguments[\"file_hash\"]\n   926→            )\n   927→            return [\n   928→                TextContent(\n   929→                    type=\"text\",\n   930→                    text=f\"Downloaded file {arguments['file_hash']} from {arguments['service']} service. File size: {len(file_content)} bytes\",\n   931→                )\n   932→            ]\n   933→        elif name == \"search_pagination\":\n   934→            result = await client.search_pagination(\n   935→                service=arguments[\"service\"],\n   936→                search_id=arguments[\"search_id\"],\n   937→                cursor=arguments.get(\"cursor\", 0),\n   938→                limit=arguments.get(\"limit\", 50),\n   939→            )\n   940→        elif name == \"get_user_quotas\":\n   941→            result = await client.get_user_quotas()\n   942→        else:\n   943→            return [TextContent(type=\"text\", text=f\"Unknown tool: {name}\")]\n   944→\n   945→        # Format response\n   946→        response_text = f\"StealthMole API Results:\\n\\n{result}\\n\\n---\\nWould you like to browse the next page of results?\"\n   947→        return [TextContent(type=\"text\", text=response_text)]\n   948→\n   949→    except asyncio.TimeoutError:\n   950→        return [\n   951→            TextContent(\n   952→                type=\"text\",\n   953→                text=\"Request timed out. The API request took too long to complete.\",\n   954→            )\n   955→        ]\n   956→    except Exception as e:\n   957→        error_msg = str(e)\n   958→        if \"timeout\" in error_msg.lower():\n   959→            return [\n   960→                TextContent(\n   961→                    type=\"text\",\n   962→                    text=f\"Timeout error: {error_msg}. Try reducing the result limit or check your network connection.\",\n   963→                )\n   964→            ]\n   965→        return [\n   966→            TextContent(\n   967→                type=\"text\",\n   968→                text=f\"Error calling StealthMole API: {error_msg}\",\n   969→            )\n   970→        ]\n   971→\n   972→\n   973→async def run_server():\n   974→    \"\"\"Run the MCP server.\"\"\"\n   975→    global client\n   976→\n   977→    try:\n   978→        print(\"Starting StealthMole MCP server...\", file=sys.stderr)\n   979→\n   980→        # Initialize StealthMole client\n   981→        access_key = os.getenv(\"STEALTHMOLE_ACCESS_KEY\")\n   982→        secret_key = os.getenv(\"STEALTHMOLE_SECRET_KEY\")\n   983→\n   984→        print(f\"Access key: {'SET' if access_key else 'NOT SET'}\", file=sys.stderr)\n   985→        print(f\"Secret key: {'SET' if secret_key else 'NOT SET'}\", file=sys.stderr)\n   986→\n   987→        if not access_key or not secret_key:\n   988→            print(\n   989→                \"Warning: STEALTHMOLE_ACCESS_KEY and STEALTHMOLE_SECRET_KEY environment variables not set\",\n   990→                file=sys.stderr,\n   991→            )\n   992→            print(\"MCP server will start but tools will not function\", file=sys.stderr)\n   993→        else:\n   994→            try:\n   995→                config = StealthMoleConfig(access_key=access_key, secret_key=secret_key)\n   996→                print(\"StealthMole config created\", file=sys.stderr)\n   997→                client = StealthMoleClient(config)\n   998→                print(\"StealthMole client initialized\", file=sys.stderr)\n   999→\n  1000→                # API 연결 테스트 (타임아웃 없이 간단히)\n  1001→                try:\n  1002→                    quotas = await client.get_user_quotas()\n  1003→                    print(\n  1004→                        f\"✓ API connection successful. Available quotas: {quotas}\",\n  1005→                        file=sys.stderr,\n  1006→                    )\n  1007→                except Exception as api_error:\n  1008→                    print(f\"Warning: API test failed: {api_error}\", file=sys.stderr)\n  1009→                    print(\"Continuing with server startup...\", file=sys.stderr)\n  1010→\n  1011→            except Exception as e:\n  1012→                print(\n  1013→                    f\"Warning: Error creating StealthMole client: {e}\", file=sys.stderr\n  1014→                )\n  1015→                print(\n  1016→                    \"MCP server will start but tools may not function properly\",\n  1017→                    file=sys.stderr,\n  1018→                )\n  1019→                import traceback\n  1020→\n  1021→                traceback.print_exc(file=sys.stderr)\n  1022→\n  1023→        print(\"Creating stdio server...\", file=sys.stderr)\n  1024→        async with stdio_server() as (read_stream, write_stream):\n  1025→            print(\"Starting MCP server...\", file=sys.stderr)\n  1026→            try:\n  1027→                await server.run(\n  1028→                    read_stream,\n  1029→                    write_stream,\n  1030→                    InitializationOptions(\n  1031→                        server_name=\"stealthmole-mcp\",\n  1032→                        server_version=\"0.1.0\",\n  1033→                        capabilities=server.get_capabilities(\n  1034→                            notification_options=NotificationOptions(),\n  1035→                            experimental_capabilities={},\n  1036→                        ),\n  1037→                    ),\n  1038→                )\n  1039→                print(\"MCP server completed normally\", file=sys.stderr)\n  1040→            except Exception as e:\n  1041→                print(f\"Error in MCP server.run: {e}\", file=sys.stderr)\n  1042→                import traceback\n  1043→\n  1044→                traceback.print_exc(file=sys.stderr)\n  1045→                raise\n  1046→    except Exception as e:\n  1047→        print(f\"Error in run_server: {e}\", file=sys.stderr)\n  1048→        import traceback\n  1049→\n  1050→        traceback.print_exc(file=sys.stderr)\n  1051→\n  1052→\n  1053→def main():\n  1054→    \"\"\"Main entry point for the MCP server.\"\"\"\n  1055→    asyncio.run(run_server())\n  1056→\n  1057→\n  1058→if __name__ == \"__main__\":\n  1059→    main()\n  1060→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"378ab932-75e5-4fac-9e32-3bc56fcb2486","timestamp":"2025-07-17T08:02:19.045Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/realsun/data/git/mole-mcp-server/src/server.py","content":"\"\"\"StealthMole MCP Server implementation.\"\"\"\n\nimport asyncio\nimport os\nimport sys\nfrom typing import Any, Optional, Sequence\n\nfrom dotenv import load_dotenv\nfrom mcp.server import NotificationOptions, Server\nfrom mcp.server.models import InitializationOptions\nfrom mcp.server.stdio import stdio_server\nfrom mcp.types import (\n    GetPromptResult,\n    Prompt,\n    PromptArgument,\n    PromptMessage,\n    Resource,\n    TextContent,\n    Tool,\n)\nfrom pydantic import AnyUrl\n\nfrom src.tools import *\nfrom src.utils.client import StealthMoleClient\nfrom src.utils.config import StealthMoleConfig\n\nload_dotenv()\n\n# Global client instance\nclient: Optional[StealthMoleClient] = None\n\n# StealthMole Prompts based on prompt-eng.md\nSTEALTHMOLE_PROMPTS = \"\"\"# Default Prompt\n\n## Role\n\n- Assistant for profilers to help analyze search results\n\n## Default Behavior\n\n- When limit is not specified, set it to 10\n- Ask whether to search the next page and provide search results\n- Provide results in markdown format\n- Do not call API if there is no quota allocation\n- Do not generate additional information such as evaluation, status, and recommendations\n- Provide results organized in an easy-to-read format\n\n# Each Function Prompt\n\n## search_darkweb\n\n- When searching in indicator:query format, search for various indicators in the dark web and provide results\n- If the user does not specify an indicator, search with keyword\n- All content searches use keyword\n- Use indicator only for domain, file hash, and email format\n- From the search results, conduct detailed node searches for all categories and analyze to provide answers to the user\n\n## search_telegram\n\n- When searching in indicator:query format, search for various indicators in Telegram and provide results\n- If the user does not specify an indicator, search with keyword\n- All content searches use keyword\n- Use indicator only for domain, file hash, and email format\n- From the search results, conduct detailed node searches for all categories and analyze to provide answers to the user\n\n## Credential Leak Search\n\n- search_credentials, search_compromised_dataset, search_combo_binder, search_ulp_binder\n\n## Monitoring\n\n- search_government_monitoring, search_leaked_monitoring, search_ransomware\n\n## export_*\n\n- If response_code is 422, guide the user to make a direct request\n\n## get_user_quotas\n\n- Only provide quota information to the user when the allowed value is greater than 0\n- Do not provide quota information unrelated to API calls (SO, FF)\n- Provide quota information in the following format:\n  ```\n  | service-name | Quota | Usage | Remaining |\n  |--------------|-------|-------|-----------|\n  | service-name | 1000  | 100 (10%) | 900 (90%) |\n  ```\n  \"\"\"\n\nserver: Server = Server(\n    \"stealthmole-mcp\",\n    \"250715\",\n)\n\n\n@server.list_resources()\nasync def handle_list_resources() -> list[Resource]:\n    \"\"\"List available resources.\"\"\"\n    return []\n\n\n@server.read_resource()\nasync def handle_read_resource(uri: AnyUrl) -> str:\n    \"\"\"Read a specific resource.\"\"\"\n    raise ValueError(f\"Unknown resource: {uri}\")\n\n\n@server.list_prompts()\nasync def handle_list_prompts() -> list[Prompt]:\n    \"\"\"List available prompts.\"\"\"\n    return [\n        Prompt(\n            name=\"stealthmole_default_prompt\",\n            description=\"Default behavior guidelines for StealthMole MCP\",\n            arguments=[\n                PromptArgument(\n                    name=\"context\",\n                    description=\"Current search context\",\n                    required=False,\n                )\n            ],\n        )\n    ]\n\n\n@server.get_prompt()\nasync def handle_get_prompt(\n    name: str, arguments: dict[str, str] | None = None\n) -> GetPromptResult:\n    \"\"\"Get a specific prompt.\"\"\"\n    if name == \"stealthmole_default_prompt\":\n        return GetPromptResult(\n            messages=[\n                PromptMessage(\n                    role=\"assistant\",\n                    content=TextContent(type=\"text\", text=STEALTHMOLE_PROMPTS),\n                )\n            ]\n        )\n    else:\n        raise ValueError(f\"Unknown prompt: {name}\")\n\n\n@server.list_tools()\nasync def handle_list_tools() -> list[Tool]:\n    \"\"\"List available StealthMole tools.\"\"\"\n    try:\n        print(\"Returning StealthMole tools list\", file=sys.stderr)\n        return [\n            Tool(\n                name=\"search_darkweb\",\n                description=\"Search dark web content for indicators like domains, IPs, emails, etc.\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"indicator\": {\n                            \"type\": \"string\",\n                            \"description\": \"The indicator type to search for\",\n                            \"enum\": [\n                                \"adsense\",\n                                \"analyticsid\",\n                                \"band\",\n                                \"bitcoin\",\n                                \"blueprint\",\n                                \"creditcard\",\n                                \"cve\",\n                                \"discord\",\n                                \"document\",\n                                \"domain\",\n                                \"email\",\n                                \"ethereum\",\n                                \"exefile\",\n                                \"facebook\",\n                                \"filehosting\",\n                                \"googledrive\",\n                                \"gps\",\n                                \"hash\",\n                                \"hashstring\",\n                                \"i2p\",\n                                \"i2purl\",\n                                \"id\",\n                                \"image\",\n                                \"instagram\",\n                                \"ioc\",\n                                \"ip\",\n                                \"kakaotalk\",\n                                \"keyword\",\n                                \"kssn\",\n                                \"leakedaudio\",\n                                \"leakedemailfile\",\n                                \"leakedvideo\",\n                                \"line\",\n                                \"linkedin\",\n                                \"malware\",\n                                \"monero\",\n                                \"otherfile\",\n                                \"pastebin\",\n                                \"pgp\",\n                                \"serverstatus\",\n                                \"session\",\n                                \"shorten\",\n                                \"sshkey\",\n                                \"sslkey\",\n                                \"tel\",\n                                \"telegram\",\n                                \"tor\",\n                                \"torurl\",\n                                \"twitter\",\n                                \"url\",\n                                \"iol\",\n                            ],\n                        },\n                        \"text\": {\n                            \"type\": \"string\",\n                            \"description\": \"Search keyword or data to find. Supports AND, OR, NOT operators (max 3 OR, 5 total operators)\",\n                        },\n                        \"target\": {\n                            \"type\": \"string\",\n                            \"description\": \"Target type to search (default: 'all'). Use comma-separated values for multiple targets\",\n                            \"default\": \"all\",\n                        },\n                        \"limit\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Maximum number of results (default: 50)\",\n                            \"default\": 50,\n                            \"minimum\": 1,\n                            \"maximum\": 50,\n                        },\n                        \"orderType\": {\n                            \"type\": \"string\",\n                            \"description\": \"Ordering type\",\n                            \"enum\": [\"createDate\", \"value\"],\n                            \"default\": \"createDate\",\n                        },\n                        \"order\": {\n                            \"type\": \"string\",\n                            \"description\": \"Sort order\",\n                            \"enum\": [\"asc\", \"desc\"],\n                            \"default\": \"desc\",\n                        },\n                    },\n                    \"required\": [\"indicator\", \"text\"],\n                },\n            ),\n            Tool(\n                name=\"search_telegram\",\n                description=\"Search Telegram content for indicators\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"indicator\": {\n                            \"type\": \"string\",\n                            \"description\": \"The indicator type to search for\",\n                            \"enum\": [\n                                \"band\",\n                                \"bitcoin\",\n                                \"creditcard\",\n                                \"cve\",\n                                \"discord\",\n                                \"document\",\n                                \"domain\",\n                                \"email\",\n                                \"ethereum\",\n                                \"exefile\",\n                                \"facebook\",\n                                \"filehosting\",\n                                \"googledrive\",\n                                \"gps\",\n                                \"hash\",\n                                \"hashstring\",\n                                \"i2p\",\n                                \"i2purl\",\n                                \"id\",\n                                \"image\",\n                                \"instagram\",\n                                \"ip\",\n                                \"kakaotalk\",\n                                \"keyword\",\n                                \"kssn\",\n                                \"line\",\n                                \"monero\",\n                                \"otherfile\",\n                                \"pastebin\",\n                                \"pgp\",\n                                \"tel\",\n                                \"session\",\n                                \"shorten\",\n                                \"telegram\",\n                                \"telegram.channel\",\n                                \"telegram.message\",\n                                \"telegram.user\",\n                                \"tor\",\n                                \"torurl\",\n                                \"tox\",\n                                \"twitter\",\n                                \"url\",\n                            ],\n                        },\n                        \"text\": {\n                            \"type\": \"string\",\n                            \"description\": \"Search keyword or data to find. Supports AND, OR, NOT operators (max 3 OR, 5 total operators)\",\n                        },\n                        \"target\": {\n                            \"type\": \"string\",\n                            \"description\": \"Target type to search (default: 'all'). Use comma-separated values for multiple targets\",\n                            \"default\": \"all\",\n                        },\n                        \"limit\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Maximum number of results (default: 50)\",\n                            \"default\": 50,\n                            \"minimum\": 1,\n                            \"maximum\": 50,\n                        },\n                        \"orderType\": {\n                            \"type\": \"string\",\n                            \"description\": \"Ordering type\",\n                            \"enum\": [\"createDate\", \"value\"],\n                            \"default\": \"createDate\",\n                        },\n                        \"order\": {\n                            \"type\": \"string\",\n                            \"description\": \"Sort order\",\n                            \"enum\": [\"asc\", \"desc\"],\n                            \"default\": \"desc\",\n                        },\n                    },\n                    \"required\": [\"indicator\", \"text\"],\n                },\n            ),\n            Tool(\n                name=\"search_credentials\",\n                description=\"Search for leaked credentials using keywords or specific indicators (domain:, email:, id:, password:, after:, before:)\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"indicator\": {\n                            \"type\": \"string\",\n                            \"description\": \"Search query - can use indicators like 'domain:example.com', 'email:user@domain.com', 'id:username', 'password:pass123', 'after:2023-01', 'before:2024-01' or plain keywords\",\n                        },\n                        \"limit\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Maximum number of results (default: 50)\",\n                            \"default\": 50,\n                            \"minimum\": 1,\n                            \"maximum\": 50,\n                        },\n                        \"cursor\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Pagination cursor (default: 0)\",\n                            \"default\": 0,\n                            \"minimum\": 0,\n                        },\n                        \"orderType\": {\n                            \"type\": \"string\",\n                            \"description\": \"Order type\",\n                            \"enum\": [\n                                \"leakedDate\",\n                                \"domain\",\n                                \"email\",\n                                \"password\",\n                                \"leakedFrom\",\n                            ],\n                            \"default\": \"leakedDate\",\n                        },\n                        \"order\": {\n                            \"type\": \"string\",\n                            \"description\": \"Sort order\",\n                            \"enum\": [\"asc\", \"desc\"],\n                            \"default\": \"desc\",\n                        },\n                        \"start\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Filter data added to the system after start time (UTC timestamp)\",\n                        },\n                        \"end\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Filter data added to the system before end time (UTC timestamp)\",\n                        },\n                    },\n                    \"required\": [\"indicator\"],\n                },\n            ),\n            Tool(\n                name=\"search_ransomware\",\n                description=\"Search ransomware monitoring data using torurl: or domain: indicators\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"indicator\": {\n                            \"type\": \"string\",\n                            \"description\": \"Search query - use 'torurl:site.onion' to search ransomware sites or 'domain:victim.com' to search victim websites. Leave empty for recent list.\",\n                        },\n                        \"limit\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Maximum number of results (default: 50)\",\n                            \"default\": 50,\n                            \"minimum\": 1,\n                            \"maximum\": 50,\n                        },\n                        \"cursor\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Pagination cursor (default: 0)\",\n                            \"default\": 0,\n                            \"minimum\": 0,\n                        },\n                        \"orderType\": {\n                            \"type\": \"string\",\n                            \"description\": \"Order type\",\n                            \"enum\": [\"detectionTime\", \"victim\", \"attackGroup\"],\n                            \"default\": \"detectionTime\",\n                        },\n                        \"order\": {\n                            \"type\": \"string\",\n                            \"description\": \"Sort order\",\n                            \"enum\": [\"asc\", \"desc\"],\n                            \"default\": \"desc\",\n                        },\n                    },\n                    \"required\": [\"indicator\"],\n                },\n            ),\n            Tool(\n                name=\"get_node_details\",\n                description=\"Get detailed information about a specific node\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"service\": {\n                            \"type\": \"string\",\n                            \"description\": \"Service type (dt, tt, cl, rm, etc.)\",\n                        },\n                        \"node_id\": {\n                            \"type\": \"string\",\n                            \"description\": \"Node ID to get details for\",\n                        },\n                        \"pid\": {\n                            \"type\": \"string\",\n                            \"description\": \"Parent node ID (optional)\",\n                        },\n                        \"data_from\": {\n                            \"type\": \"boolean\",\n                            \"description\": \"Import data source list (default: False)\",\n                            \"default\": False,\n                        },\n                        \"include_url\": {\n                            \"type\": \"boolean\",\n                            \"description\": \"Import included URL list (default: False)\",\n                            \"default\": False,\n                        },\n                        \"include_contents\": {\n                            \"type\": \"boolean\",\n                            \"description\": \"Include HTML source contents for torurl, i2purl, url (default: True)\",\n                            \"default\": True,\n                        },\n                    },\n                    \"required\": [\"service\", \"node_id\"],\n                },\n            ),\n            Tool(\n                name=\"get_targets\",\n                description=\"Get available search targets for a service and indicator\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"service\": {\n                            \"type\": \"string\",\n                            \"description\": \"Service type (dt, tt, cl, rm, etc.)\",\n                        },\n                        \"indicator\": {\n                            \"type\": \"string\",\n                            \"description\": \"The indicator type\",\n                        },\n                    },\n                    \"required\": [\"service\", \"indicator\"],\n                },\n            ),\n            Tool(\n                name=\"export_data\",\n                description=\"Export search results in specified format\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"service\": {\n                            \"type\": \"string\",\n                            \"description\": \"Service type (dt, tt, cl, rm, etc.)\",\n                        },\n                        \"indicator\": {\n                            \"type\": \"string\",\n                            \"description\": \"The indicator to export data for\",\n                        },\n                        \"format\": {\n                            \"type\": \"string\",\n                            \"description\": \"Export format (json or csv)\",\n                            \"enum\": [\"json\", \"csv\"],\n                            \"default\": \"json\",\n                        },\n                    },\n                    \"required\": [\"service\", \"indicator\"],\n                },\n            ),\n            Tool(\n                name=\"search_compromised_dataset\",\n                description=\"Search compromised data set information\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"indicator\": {\n                            \"type\": \"string\",\n                            \"description\": \"The indicator to search for\",\n                        },\n                        \"limit\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Maximum number of results (default: 50)\",\n                            \"default\": 50,\n                            \"minimum\": 1,\n                            \"maximum\": 50,\n                        },\n                    },\n                    \"required\": [\"indicator\"],\n                },\n            ),\n            Tool(\n                name=\"export_compromised_dataset\",\n                description=\"Export compromised data set as CSV/JSON\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"indicator\": {\n                            \"type\": \"string\",\n                            \"description\": \"The indicator to export data for\",\n                        },\n                        \"format\": {\n                            \"type\": \"string\",\n                            \"description\": \"Export format (json or csv)\",\n                            \"enum\": [\"json\", \"csv\"],\n                            \"default\": \"json\",\n                        },\n                    },\n                    \"required\": [\"indicator\"],\n                },\n            ),\n            Tool(\n                name=\"get_compromised_dataset_node\",\n                description=\"Get detailed compromised data set node information (Cyber Security Edition required)\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"node_id\": {\n                            \"type\": \"string\",\n                            \"description\": \"Node ID to get details for\",\n                        }\n                    },\n                    \"required\": [\"node_id\"],\n                },\n            ),\n            Tool(\n                name=\"search_combo_binder\",\n                description=\"Search leaked ID/Password combo information\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"indicator\": {\n                            \"type\": \"string\",\n                            \"description\": \"The indicator to search for\",\n                        },\n                        \"limit\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Maximum number of results (default: 50)\",\n                            \"default\": 50,\n                            \"minimum\": 1,\n                            \"maximum\": 50,\n                        },\n                    },\n                    \"required\": [\"indicator\"],\n                },\n            ),\n            Tool(\n                name=\"export_combo_binder\",\n                description=\"Export combo binder data as CSV/JSON\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"indicator\": {\n                            \"type\": \"string\",\n                            \"description\": \"The indicator to export data for\",\n                        },\n                        \"format\": {\n                            \"type\": \"string\",\n                            \"description\": \"Export format (json or csv)\",\n                            \"enum\": [\"json\", \"csv\"],\n                            \"default\": \"json\",\n                        },\n                    },\n                    \"required\": [\"indicator\"],\n                },\n            ),\n            Tool(\n                name=\"search_ulp_binder\",\n                description=\"Search URL-Login-Password combination information\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"indicator\": {\n                            \"type\": \"string\",\n                            \"description\": \"The indicator to search for\",\n                        },\n                        \"limit\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Maximum number of results (default: 50)\",\n                            \"default\": 50,\n                            \"minimum\": 1,\n                            \"maximum\": 50,\n                        },\n                    },\n                    \"required\": [\"indicator\"],\n                },\n            ),\n            Tool(\n                name=\"export_ulp_binder\",\n                description=\"Export ULP binder data as CSV/JSON\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"indicator\": {\n                            \"type\": \"string\",\n                            \"description\": \"The indicator to export data for\",\n                        },\n                        \"format\": {\n                            \"type\": \"string\",\n                            \"description\": \"Export format (json or csv)\",\n                            \"enum\": [\"json\", \"csv\"],\n                            \"default\": \"json\",\n                        },\n                    },\n                    \"required\": [\"indicator\"],\n                },\n            ),\n            Tool(\n                name=\"search_government_monitoring\",\n                description=\"Search government sector threat monitoring data using url: or id: indicators\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"indicator\": {\n                            \"type\": \"string\",\n                            \"description\": \"Search query - use 'url:hackersite.com' to search threat event URLs or 'id:hacker123' to search actor IDs. Leave empty for recent list.\",\n                        },\n                        \"limit\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Maximum number of results (default: 50)\",\n                            \"default\": 50,\n                            \"minimum\": 1,\n                            \"maximum\": 50,\n                        },\n                        \"cursor\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Pagination cursor (default: 0)\",\n                            \"default\": 0,\n                            \"minimum\": 0,\n                        },\n                        \"orderType\": {\n                            \"type\": \"string\",\n                            \"description\": \"Order type\",\n                            \"enum\": [\"detectionTime\", \"title\", \"author\"],\n                            \"default\": \"detectionTime\",\n                        },\n                        \"order\": {\n                            \"type\": \"string\",\n                            \"description\": \"Sort order\",\n                            \"enum\": [\"asc\", \"desc\"],\n                            \"default\": \"desc\",\n                        },\n                    },\n                    \"required\": [\"indicator\"],\n                },\n            ),\n            Tool(\n                name=\"search_leaked_monitoring\",\n                description=\"Search enterprise sector threat monitoring data using url: or id: indicators\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"indicator\": {\n                            \"type\": \"string\",\n                            \"description\": \"Search query - use 'url:hackersite.com' to search threat event URLs or 'id:hacker123' to search actor IDs. Leave empty for recent list.\",\n                        },\n                        \"limit\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Maximum number of results (default: 50)\",\n                            \"default\": 50,\n                            \"minimum\": 1,\n                            \"maximum\": 50,\n                        },\n                        \"cursor\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Pagination cursor (default: 0)\",\n                            \"default\": 0,\n                            \"minimum\": 0,\n                        },\n                        \"orderType\": {\n                            \"type\": \"string\",\n                            \"description\": \"Order type\",\n                            \"enum\": [\"detectionTime\", \"title\", \"author\"],\n                            \"default\": \"detectionTime\",\n                        },\n                        \"order\": {\n                            \"type\": \"string\",\n                            \"description\": \"Sort order\",\n                            \"enum\": [\"asc\", \"desc\"],\n                            \"default\": \"desc\",\n                        },\n                    },\n                    \"required\": [\"indicator\"],\n                },\n            ),\n            Tool(\n                name=\"download_file\",\n                description=\"Download file by hash from dt or tt service\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"service\": {\n                            \"type\": \"string\",\n                            \"description\": \"Service type (dt or tt)\",\n                            \"enum\": [\"dt\", \"tt\"],\n                        },\n                        \"file_hash\": {\n                            \"type\": \"string\",\n                            \"description\": \"File hash to download\",\n                        },\n                    },\n                    \"required\": [\"service\", \"file_hash\"],\n                },\n            ),\n            Tool(\n                name=\"search_pagination\",\n                description=\"Pagination search using search ID for dt or tt service\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"service\": {\n                            \"type\": \"string\",\n                            \"description\": \"Service type (dt or tt)\",\n                            \"enum\": [\"dt\", \"tt\"],\n                        },\n                        \"search_id\": {\n                            \"type\": \"string\",\n                            \"description\": \"Search ID from previous search\",\n                        },\n                        \"cursor\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Pagination cursor (default: 0)\",\n                            \"default\": 0,\n                            \"minimum\": 0,\n                        },\n                        \"limit\": {\n                            \"type\": \"integer\",\n                            \"description\": \"Maximum number of results (default: 50)\",\n                            \"default\": 50,\n                            \"minimum\": 1,\n                            \"maximum\": 50,\n                        },\n                    },\n                    \"required\": [\"service\", \"search_id\"],\n                },\n            ),\n            Tool(\n                name=\"get_user_quotas\",\n                description=\"Get API usage quotas by service\",\n                inputSchema={\"type\": \"object\", \"properties\": {}, \"required\": []},\n            ),\n        ]\n    except Exception as e:\n        print(f\"Error in handle_list_tools: {e}\", file=sys.stderr)\n        import traceback\n\n        traceback.print_exc(file=sys.stderr)\n        return []\n\n\ndef apply_default_behavior(name: str, arguments: dict[str, Any]) -> dict[str, Any]:\n    \"\"\"Apply default behavior rules to tool arguments.\"\"\"\n    # Always set limit to maximum value\n    if \"limit\" in arguments:\n        if name in [\"search_darkweb\", \"search_telegram\"]:\n            arguments[\"limit\"] = 50\n        elif name in [\n            \"search_credentials\",\n            \"search_ransomware\",\n            \"search_compromised_dataset\",\n            \"search_combo_binder\",\n            \"search_ulp_binder\",\n            \"search_government_monitoring\",\n            \"search_leaked_monitoring\",\n        ]:\n            arguments[\"limit\"] = 50\n\n    # Handle indicator defaults for search tools\n    if name in [\"search_darkweb\", \"search_telegram\"]:\n        if \"indicator\" not in arguments or not arguments[\"indicator\"]:\n            arguments[\"indicator\"] = \"keyword\"\n\n    return arguments\n\n\n@server.call_tool()\nasync def handle_call_tool(name: str, arguments: dict[str, Any]) -> list[TextContent]:\n    \"\"\"Handle tool calls with default behavior applied.\"\"\"\n    global client\n\n    if client is None:\n        return [\n            TextContent(\n                type=\"text\",\n                text=\"Error: StealthMole client not initialized. Please check your API credentials.\",\n            )\n        ]\n\n    # Apply default behavior rules\n    arguments = apply_default_behavior(name, arguments)\n\n    try:\n        if name == \"search_darkweb\":\n            result = await client.search_darkweb(\n                indicator=arguments[\"indicator\"],\n                text=arguments[\"text\"],\n                target=arguments.get(\"target\", \"all\"),\n                limit=arguments.get(\"limit\", 50),\n                orderType=arguments.get(\"orderType\", \"createDate\"),\n                order=arguments.get(\"order\", \"desc\"),\n            )\n        elif name == \"search_telegram\":\n            result = await client.search_telegram(\n                indicator=arguments[\"indicator\"],\n                text=arguments[\"text\"],\n                target=arguments.get(\"target\", \"all\"),\n                limit=arguments.get(\"limit\", 50),\n                orderType=arguments.get(\"orderType\", \"createDate\"),\n                order=arguments.get(\"order\", \"desc\"),\n            )\n        elif name == \"search_credentials\":\n            result = await client.search_credentials(\n                indicator=arguments[\"indicator\"],\n                limit=arguments.get(\"limit\", 50),\n                cursor=arguments.get(\"cursor\", 0),\n                orderType=arguments.get(\"orderType\", \"leakedDate\"),\n                order=arguments.get(\"order\", \"desc\"),\n                start=arguments.get(\"start\"),\n                end=arguments.get(\"end\"),\n            )\n        elif name == \"search_ransomware\":\n            result = await client.search_ransomware(\n                indicator=arguments[\"indicator\"],\n                limit=arguments.get(\"limit\", 50),\n                cursor=arguments.get(\"cursor\", 0),\n                orderType=arguments.get(\"orderType\", \"detectionTime\"),\n                order=arguments.get(\"order\", \"desc\"),\n            )\n        elif name == \"get_node_details\":\n            result = await client.get_node_details(\n                service=arguments[\"service\"],\n                node_id=arguments[\"node_id\"],\n                pid=arguments.get(\"pid\"),\n                data_from=arguments.get(\"data_from\", False),\n                include_url=arguments.get(\"include_url\", False),\n                include_contents=arguments.get(\"include_contents\", True),\n            )\n        elif name == \"get_targets\":\n            result = await client.get_targets(\n                service=arguments[\"service\"], indicator=arguments[\"indicator\"]\n            )\n        elif name == \"export_data\":\n            result = await client.export_data(\n                service=arguments[\"service\"],\n                indicator=arguments[\"indicator\"],\n                format=arguments.get(\"format\", \"json\"),\n            )\n        elif name == \"search_compromised_dataset\":\n            result = await client.search_compromised_dataset(\n                indicator=arguments[\"indicator\"], limit=arguments.get(\"limit\", 50)\n            )\n        elif name == \"export_compromised_dataset\":\n            result = await client.export_compromised_dataset(\n                indicator=arguments[\"indicator\"], format=arguments.get(\"format\", \"json\")\n            )\n        elif name == \"get_compromised_dataset_node\":\n            result = await client.get_compromised_dataset_node(\n                node_id=arguments[\"node_id\"]\n            )\n        elif name == \"search_combo_binder\":\n            result = await client.search_combo_binder(\n                indicator=arguments[\"indicator\"], limit=arguments.get(\"limit\", 50)\n            )\n        elif name == \"export_combo_binder\":\n            result = await client.export_combo_binder(\n                indicator=arguments[\"indicator\"], format=arguments.get(\"format\", \"json\")\n            )\n        elif name == \"search_ulp_binder\":\n            result = await client.search_ulp_binder(\n                indicator=arguments[\"indicator\"], limit=arguments.get(\"limit\", 50)\n            )\n        elif name == \"export_ulp_binder\":\n            result = await client.export_ulp_binder(\n                indicator=arguments[\"indicator\"], format=arguments.get(\"format\", \"json\")\n            )\n        elif name == \"search_government_monitoring\":\n            result = await client.search_government_monitoring(\n                indicator=arguments[\"indicator\"],\n                limit=arguments.get(\"limit\", 50),\n                cursor=arguments.get(\"cursor\", 0),\n                orderType=arguments.get(\"orderType\", \"detectionTime\"),\n                order=arguments.get(\"order\", \"desc\"),\n            )\n        elif name == \"search_leaked_monitoring\":\n            result = await client.search_leaked_monitoring(\n                indicator=arguments[\"indicator\"],\n                limit=arguments.get(\"limit\", 50),\n                cursor=arguments.get(\"cursor\", 0),\n                orderType=arguments.get(\"orderType\", \"detectionTime\"),\n                order=arguments.get(\"order\", \"desc\"),\n            )\n        elif name == \"download_file\":\n            file_content = await client.download_file(\n                service=arguments[\"service\"], file_hash=arguments[\"file_hash\"]\n            )\n            return [\n                TextContent(\n                    type=\"text\",\n                    text=f\"Downloaded file {arguments['file_hash']} from {arguments['service']} service. File size: {len(file_content)} bytes\",\n                )\n            ]\n        elif name == \"search_pagination\":\n            result = await client.search_pagination(\n                service=arguments[\"service\"],\n                search_id=arguments[\"search_id\"],\n                cursor=arguments.get(\"cursor\", 0),\n                limit=arguments.get(\"limit\", 50),\n            )\n        elif name == \"get_user_quotas\":\n            result = await client.get_user_quotas()\n        else:\n            return [TextContent(type=\"text\", text=f\"Unknown tool: {name}\")]\n\n        # Format response\n        response_text = f\"StealthMole API Results:\\n\\n{result}\\n\\n---\\nWould you like to browse the next page of results?\"\n        return [TextContent(type=\"text\", text=response_text)]\n\n    except asyncio.TimeoutError:\n        return [\n            TextContent(\n                type=\"text\",\n                text=\"Request timed out. The API request took too long to complete.\",\n            )\n        ]\n    except Exception as e:\n        error_msg = str(e)\n        if \"timeout\" in error_msg.lower():\n            return [\n                TextContent(\n                    type=\"text\",\n                    text=f\"Timeout error: {error_msg}. Try reducing the result limit or check your network connection.\",\n                )\n            ]\n        return [\n            TextContent(\n                type=\"text\",\n                text=f\"Error calling StealthMole API: {error_msg}\",\n            )\n        ]\n\n\nasync def run_server():\n    \"\"\"Run the MCP server.\"\"\"\n    global client\n\n    try:\n        print(\"Starting StealthMole MCP server...\", file=sys.stderr)\n\n        # Initialize StealthMole client\n        access_key = os.getenv(\"STEALTHMOLE_ACCESS_KEY\")\n        secret_key = os.getenv(\"STEALTHMOLE_SECRET_KEY\")\n\n        print(f\"Access key: {'SET' if access_key else 'NOT SET'}\", file=sys.stderr)\n        print(f\"Secret key: {'SET' if secret_key else 'NOT SET'}\", file=sys.stderr)\n\n        if not access_key or not secret_key:\n            print(\n                \"Warning: STEALTHMOLE_ACCESS_KEY and STEALTHMOLE_SECRET_KEY environment variables not set\",\n                file=sys.stderr,\n            )\n            print(\"MCP server will start but tools will not function\", file=sys.stderr)\n        else:\n            try:\n                config = StealthMoleConfig(access_key=access_key, secret_key=secret_key)\n                print(\"StealthMole config created\", file=sys.stderr)\n                client = StealthMoleClient(config)\n                print(\"StealthMole client initialized\", file=sys.stderr)\n\n                # API 연결 테스트 (타임아웃 없이 간단히)\n                try:\n                    quotas = await client.get_user_quotas()\n                    print(\n                        f\"✓ API connection successful. Available quotas: {quotas}\",\n                        file=sys.stderr,\n                    )\n                except Exception as api_error:\n                    print(f\"Warning: API test failed: {api_error}\", file=sys.stderr)\n                    print(\"Continuing with server startup...\", file=sys.stderr)\n\n            except Exception as e:\n                print(\n                    f\"Warning: Error creating StealthMole client: {e}\", file=sys.stderr\n                )\n                print(\n                    \"MCP server will start but tools may not function properly\",\n                    file=sys.stderr,\n                )\n                import traceback\n\n                traceback.print_exc(file=sys.stderr)\n\n        print(\"Creating stdio server...\", file=sys.stderr)\n        async with stdio_server() as (read_stream, write_stream):\n            print(\"Starting MCP server...\", file=sys.stderr)\n            try:\n                await server.run(\n                    read_stream,\n                    write_stream,\n                    InitializationOptions(\n                        server_name=\"stealthmole-mcp\",\n                        server_version=\"0.1.0\",\n                        capabilities=server.get_capabilities(\n                            notification_options=NotificationOptions(),\n                            experimental_capabilities={},\n                        ),\n                    ),\n                )\n                print(\"MCP server completed normally\", file=sys.stderr)\n            except Exception as e:\n                print(f\"Error in MCP server.run: {e}\", file=sys.stderr)\n                import traceback\n\n                traceback.print_exc(file=sys.stderr)\n                raise\n    except Exception as e:\n        print(f\"Error in run_server: {e}\", file=sys.stderr)\n        import traceback\n\n        traceback.print_exc(file=sys.stderr)\n\n\ndef main():\n    \"\"\"Main entry point for the MCP server.\"\"\"\n    asyncio.run(run_server())\n\n\nif __name__ == \"__main__\":\n    main()\n","numLines":1060,"startLine":1,"totalLines":1060}}}
{"parentUuid":"378ab932-75e5-4fac-9e32-3bc56fcb2486","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","message":{"id":"msg_01KMXyPAzfAXjY62D2Dqs2fh","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now I'll create the TypeScript configuration files and package.json:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":263,"cache_creation_input_tokens":12781,"cache_read_input_tokens":16199,"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CRCEwYr1j8ZmJWdJuvkdb","type":"assistant","uuid":"bab98930-b51f-4147-a0e2-6bf9b161be91","timestamp":"2025-07-17T08:02:22.944Z"}
{"parentUuid":"bab98930-b51f-4147-a0e2-6bf9b161be91","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","message":{"id":"msg_01KMXyPAzfAXjY62D2Dqs2fh","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01VmJh2g6JwiAZXUnBJqnJLd","name":"Write","input":{"file_path":"/Users/realsun/data/git/mole-mcp-server/package.json","content":"{\n  \"name\": \"mole-mcp-server\",\n  \"version\": \"0.1.0\",\n  \"description\": \"StealthMole MCP Server - TypeScript implementation\",\n  \"main\": \"build/index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"dev\": \"tsx src/index.ts\",\n    \"start\": \"node build/index.js\",\n    \"clean\": \"rm -rf build\"\n  },\n  \"keywords\": [\"mcp\", \"stealthmole\", \"security\", \"threat-intelligence\"],\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@modelcontextprotocol/sdk\": \"^0.6.0\",\n    \"dotenv\": \"^16.0.0\",\n    \"zod\": \"^3.22.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.0.0\",\n    \"tsx\": \"^4.0.0\",\n    \"typescript\": \"^5.0.0\"\n  }\n}"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":263,"cache_creation_input_tokens":12781,"cache_read_input_tokens":16199,"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CRCEwYr1j8ZmJWdJuvkdb","type":"assistant","uuid":"6d23998e-525e-4cda-a9b8-51377cb72fee","timestamp":"2025-07-17T08:02:27.739Z"}
{"parentUuid":"6d23998e-525e-4cda-a9b8-51377cb72fee","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","type":"user","message":{"role":"user","content":[{"type":"tool_result","content":"The user doesn't want to proceed with this tool use. The tool use was rejected (eg. if it was a file edit, the new_string was NOT written to the file). STOP what you are doing and wait for the user to tell you how to proceed.","is_error":true,"tool_use_id":"toolu_01VmJh2g6JwiAZXUnBJqnJLd"}]},"uuid":"533fe675-e059-47b8-bf24-943b99e7f591","timestamp":"2025-07-17T08:07:56.777Z","toolUseResult":"Error: The user doesn't want to proceed with this tool use. The tool use was rejected (eg. if it was a file edit, the new_string was NOT written to the file). STOP what you are doing and wait for the user to tell you how to proceed."}
{"parentUuid":"533fe675-e059-47b8-bf24-943b99e7f591","isSidechain":false,"userType":"external","cwd":"/Users/realsun/data/git/mole-mcp-server","sessionId":"ad61424b-795b-4f3c-b5ca-409a0b2e176f","version":"1.0.53","type":"user","message":{"role":"user","content":[{"type":"text","text":"[Request interrupted by user for tool use]"}]},"uuid":"a0a93f75-4804-4ff3-9171-b0ca35c93fd3","timestamp":"2025-07-17T08:07:56.806Z"}
